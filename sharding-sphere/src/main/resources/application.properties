## 数据源 ds0,ds1
#sharding.jdbc.datasource.names=s0,s1
## 第一个数据库
#sharding.jdbc.datasource.s0.type=com.zaxxer.hikari.HikariDataSource
#sharding.jdbc.datasource.s0.driver-class-name=com.mysql.cj.jdbc.Driver
#sharding.jdbc.datasource.s0.jdbc-url=jdbc:mysql://localhost:3306/s0?characterEncoding=utf-8&&serverTimezone=GMT%2B8
#sharding.jdbc.datasource.s0.username=root
#sharding.jdbc.datasource.s0.password=root
#
## 第二个数据库
#sharding.jdbc.datasource.s1.type=com.zaxxer.hikari.HikariDataSource
#sharding.jdbc.datasource.s1.driver-class-name=com.mysql.cj.jdbc.Driver
#sharding.jdbc.datasource.s1.jdbc-url=jdbc:mysql://localhost:3306/s1?characterEncoding=utf-8&&serverTimezone=GMT%2B8
#sharding.jdbc.datasource.s1.username=root
#sharding.jdbc.datasource.s1.password=root
#
## 水平拆分的数据库（表） 配置分库 + 分表策略 行表达式分片策略
## 分库策略
#sharding.jdbc.config.sharding.default-database-strategy.inline.sharding-column=id
#sharding.jdbc.config.sharding.default-database-strategy.inline.algorithm-expression=s$->{id % 2}
#
## 分表策略 其中user为逻辑表 分表主要取决于age行
#sharding.jdbc.config.sharding.tables.ss_user.actual-data-nodes=s$->{0..1}.ss_user$->{0..1}
#sharding.jdbc.config.sharding.tables.ss_user.table-strategy.inline.sharding-column=id
## 分片算法表达式
#sharding.jdbc.config.sharding.tables.ss_user.table-strategy.inline.algorithm-expression=ss_user$->{id % 2}
#
## 主键 UUID 18位数 如果是分布式还要进行一个设置 防止主键重复
##sharding.jdbc.config.sharding.tables.user.key-generator-column-name=id
#
## 打印执行的数据库以及语句
#sharding.jdbc.config.props..sql.show=true
#spring.main.allow-bean-definition-overriding=true